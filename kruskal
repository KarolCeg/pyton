class Graf():

    def __init__(self, wierzcholki, krawedzie):

        for wierzcholek in wierzcholki:
            if wierzcholki.count(wierzcholek)>1:
                raise Exception("nieprawidłowe wierzchołki")
        for krawedz in krawedzie:
            if not krawedz[0][0] in wierzcholki or not krawedz[0][1] in wierzcholki:
                raise Exception("nieprawidłowe krawędzie")              
        same_krawedzie = []          
        for krawedz in krawedzie:
            same_krawedzie.append(krawedz[0])
        for sama_krawedz in same_krawedzie:
            if same_krawedzie.count(sama_krawedz)>1:
                raise Exception("nieprawidłowe krawedzie")
            
        self.wierzcholki = list(wierzcholki)
        self.krawedzie = list(krawedzie)

    def Utw_zbior(self, elem):
        return {elem}

    def Sort(self, A):
        kraw = []
        A.sort(key=lambda x : x[1])
        for elem in A:
            kraw.append(elem[0])
        return kraw

    def Znaj_elem(self, szukane, lista):
        for elem in lista:
            if szukane in elem:
                return elem

    def Kruskal(self, Waga):
        A = []
        B = []
        for elem in self.wierzcholki:
            B.append(self.Utw_zbior(elem))  
        Waga_sort = self.Sort(Waga) 
        for i, j in Waga_sort:
            zbior_a = self.Znaj_elem(i, B) 
            zbior_b = self.Znaj_elem(j, B)
            if zbior_a != zbior_b:
                A.append((i, j))
                B.append(zbior_a.union(zbior_b))
                B.remove(zbior_b)
                B.remove(zbior_a)
        return A


if __name__ == "__main__":
    g_wierzcholki = ["A", "B", "C", "D", "E", "F", "G", "H" , "I" ]
    g_krawedzie =[(("A","B"), 4), (("A","H"),8), (("B","C"),8), (("H","I"),7),(("H","B"),11),(("I","C"),2),(("I","G"),6),(("C","D"),6),(("D","G"),7),(("E","G"),4),(("E","H"),2),(("E","F"),14),(("G","H"),9),(("H","F"),10) ]

    g = Graf(g_wierzcholki, g_krawedzie)
    print(g.Kruskal(g_krawedzie))

    
