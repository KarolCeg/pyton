class graf:
    
    # konstruktor
    def __init__(self, W, K):
        warunek=0
        for i in W:
            if W.count(i)>1:
                for j in range(W.count(i)-1):
                    W.pop(W.index(i))
                warunek=1
        for i in K:
            if i[0] in W or i[1] in W:
                pass
            else:
                #K.pop(K.index(i))
                warunek=2
        for i in K:
            if K.count(i)>1:
                for j in range(K.count(i)-1):
                    K.pop(K.index(i))
                warunek=2
    
        if warunek==1:
            #raise Exception("Niepoprawne wierzcholki")
            pass
        if warunek==2:
            raise Exception("Niepoprawne krawedzie")
            pass
        
        self.wiercholki=list(W)
        self.krawedzie=list(K)
    
    def UNION(self, u, v, S):
        if not u in S:
            raise Exception("Niepoprawne zbiory")
        if not u in S:
            raise Exception("Niepoprawne zbiory")
        w=u|v
        S.append(w)
        S.pop(S.index(u))
        S.pop(S.index(v))
        return S
    
    def MAKE_SET(self, v, S):
        w=set(v)
        S.append(w)
        return S
    
    def FIND_SET(self, u, S):
        for i in S:
            if u in i:
                return i
            
    def sortujwedlugwag(self, W):
        A=list()
        for i in range(len(self.krawedzie)):
            A.append((W[i], self.krawedzie[i]))
        pom=True
        while pom:
            pom=False
            for i in range(len(A)-1):
                if A[i][0]>A[i+1][0]:
                    k=A[i]
                    A[i]=A[i+1]
                    A[i+1]=k
                    pom=True
        R=list()
        for i in A:
            R.append(i[1])
        return R
    
    def kruskal(self, W):
        A=list()
        S=list()
        for i in self.wiercholki:
            S=self.MAKE_SET(i, S)
        E=self.sortujwedlugwag(W)
        for i in E:
            if not self.FIND_SET(i[0], S)==self.FIND_SET(i[1], S):
                A.append(i)
                self.UNION(self.FIND_SET(i[0], S), self.FIND_SET(i[1], S), S)
        return A



if __name__ == "__main__":
    Wierz=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']
    Kra=[('a', 'b'),('a', 'h'),('b', 'h'),('h', 'i'),('i', 'c'),('i', 'g'),('c', 'd'),('g', 'f'),('c', 'f'),('d', 'f'),('d', 'e'),('e', 'f'),('h', 'g'),('b', 'c')]
    Wagi=[4, 8, 11, 7, 2, 6, 7, 2, 4, 14, 9, 10, 1, 8]
    g = graf(Wierz, Kra)

    print(g.kruskal(Wagi))
