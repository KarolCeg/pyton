"""
wierzcholek 
krawiedz -> 2 wierzchłoki połaczone

lista nazwy wierzcholkow
lista krawedzi(lista krotek)

konstruktor zbierajacy wierzcholki i krawedzie

graf nieskierowany

lista krotek dwu elementowych

nie może byc wierzchołkow o tych samych nazwach

krawedzie musza miec w nazwach tylko wierzchloki
krotka opisujaca krawedz musi sie poslugiwac jedna z dozwolonych wierzcholkow

uzyc zbiorow zeby wierzcholki sie nie powtarzaly

-------------
sasiedzi danego wierzcholka
"""
class graf():

    def __init__(self , wierzcholki , krawedzie):
        self.wierzcholki = list()
        self.wierzcholki = set(wierzcholki)
        self.krawedzie = krawedzie
        self.sasiedzi = []
        if(len(wierzcholki) != len(set(wierzcholki))):
            raise Exception("Nie da sie utworzyc takiego grafu(wierzcholki)")
        for krawedz in krawedzie:
            if not krawedz[0] in wierzcholki or not krawedz[1] in wierzcholki:
                raise Exception("Nie da sie utworzyc takiego grafu(krawedzie)") 

    def polaczenia_krawedz(self,wierzcholek): # zwraca krawedz ktora zawiera wierzcholek
        for krawedz in self.krawedzie:
            for x in range (2):
                if(wierzcholek == krawedz[x]):
                    print("polaczenia dla {0} : {1} " .format(wierzcholek,krawedz))
    
    def polaczenia(self,wierzcholek): #co jest połaczone z czym
        for krawedz in self.krawedzie:
            if(wierzcholek == krawedz[0]):
                self.sasiedzi.append(krawedz[1])
            if(wierzcholek == krawedz[1]):
                self.sasiedzi.append(krawedz[0])
        print(self.sasiedzi) #return self.sasiedzi
       

    def drzewo(self): #sprawdza czy graf jest drzewem   #szukamy drzewa ktore nie ma petli
        wierzcholki = [set([i]) for i in self.wierzcholki]
        for krawedz in self.krawedzie:
            zbior_wierzcholka_A = None
            zbior_wierzcholka_B = None
            for zbior in wierzcholki:
                if krawedz[0] in zbior:
                    if krawedz[0] in zbior:
                        zbior_wierzcholka_A = zbior
                    if krawedz[1] in zbior:
                        zbior_wierzcholka_B = zbior
                if zbior_wierzcholka_A == zbior_wierzcholka_B:
                    return False # to nie jest drzewo
                #tu nastepuje łaczenie zbiorow
                else: 
                    zbior_wierzcholka_A.union(zbior_wierzcholka_B)
                    wierzcholki.remowe(zbior_wierzcholka_B)
            return True
            





if __name__ == "__main__":

    g = graf(['a' , 'b' , 'c'  ] , [('a' , 'b'), ('b' , 'c'), ('c' , 'a')])
    #g.polaczenia('a')
    if g.drzewo() == False:
        print("tak")
