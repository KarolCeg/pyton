"""
wierzcholek 
krawiedz -> 2 wierzchłoki połaczone

lista nazwy wierzcholkow
lista krawedzi(lista krotek)

konstruktor zbierajacy wierzcholki i krawedzie

graf nieskierowany

lista krotek dwu elementowych

nie może byc wierzchołkow o tych samych nazwach

krawedzie musza miec w nazwach tylko wierzchloki
krotka opisujaca krawedz musi sie poslugiwac jedna z dozwolonych wierzcholkow

uzyc zbiorow zeby wierzcholki sie nie powtarzaly

-------------
sasiedzi danego wierzcholka
"""
class graf():

    def __init__(self , wierzcholki , krawedzie):
        self.wierzcholki = list()
        self.wierzcholki = set(wierzcholki)
        self.krawedzie = krawedzie
        if(len(wierzcholki) != len(set(wierzcholki))):
            raise Exception("Nie da sie utworzyc takiego grafu(wierzcholki)")
        for krawedz in krawedzie:
            if not krawedz[0] in wierzcholki or not krawedz[1] in wierzcholki:
                raise Exception("Nie da sie utworzyc takiego grafu(krawedzie)") 

    def polaczenia_krawedz(self,wierzcholek):
        for krawedz in self.krawedzie:
            for x in range (2):
                if(wierzcholek == krawedz[x]):
                    print("polaczenia dla {0} : {1} " .format(wierzcholek,krawedz))
    
    def polaczenia(self,wierzcholek):
        sasiedzi = []
        for krawedz in self.krawedzie:
            if(wierzcholek == krawedz[0]):
                sasiedzi.append(krawedz[1])
            if(wierzcholek == krawedz[1]):
                sasiedzi.append(krawedz[0])
        print(sasiedzi)
if __name__ == "__main__":

    g = graf(['a' , 'b' , 'c'  ] , [('a' , 'b'), ('b' , 'c'), ('a' , 'c'), ('a' , 'b')])
    g.polaczenia('a')
